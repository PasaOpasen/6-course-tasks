b1 = lm(RM ~ MRM + MRM:Count - 1, data)
b2 = lm(RM ~ MRM:Count:CountGroup + MRM:CountGroup - 1, data)
b3 = lm(RM ~ MRM:Count:CountGroup + MRM:Action - 1, data) #%>% all()
b4 = lm(RM ~ MRM:Action + MRM:I(Count ^ 2) + Action2:I(MRM / Weight) + MRM:Count:CountGroup - 1,
data)
data %<>% mutate(
Body2 = ifelse(BodyType == "Эндоморф", "Endo", "NonEndo") %>% factor(),
Action2 = ifelse(Action == "Жим", "Up", "Down") %>% factor()
)
b1 = lm(RM ~ MRM + MRM:Count - 1, data)
b2 = lm(RM ~ MRM:Count:CountGroup + MRM:CountGroup - 1, data)
b3 = lm(RM ~ MRM:Count:CountGroup + MRM:Action - 1, data) #%>% all()
b4 = lm(RM ~ MRM:Action + MRM:I(Count ^ 2) + Action2:I(MRM / Weight) + MRM:Count:CountGroup - 1,
data)
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
kn = c(5, 6, 7, 8, 9, 10, 11, 12)
ct = c(8, 11)
gr = rep(c('2-10', '2-7'), length(kn)) %>% sort(decreasing = T)
m = matrix(nrow = length(kn) * length(ct), ncol = 5)
lst = list(b1, b2, b3, b4, b5)
for (i in 1:5) {
model = lst[[i]]
for (j in 1:length(ct)) {
dt = data %>% filter(Count < ct[j])
gl = glm(formula = model$call$formula, data = dt)
getval = function(k) {
boot::cv.glm(dt, gl, K = k)$delta[1] %>% return()
}
getval.mean = function(k, count) {
map_dbl(1:count, function(x)
getval(k)) %>% mean() %>% return()
}
beg = (j - 1) * length(kn)
for (s in 1:length(kn)) {
m[beg + s, i] = getval.mean(kn[s], 30)
}
#print(m)
}
}
colnames(m) = paste0('b', 1:5)
kp = rep(kn, length(ct))
vals = data.frame(
kp = rep(kp, 5),
b = as.numeric(m),
gr = factor(rep(gr, 5)),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n,shape=n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n,shape=n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(size = 4) + geom_line(aes(type=2),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n,shape=n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности",
shape=NULL
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(shape=FALSE)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(shape=FALSE,linetype=F)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных (диапазонах повторений)",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(shape=FALSE,linetype=F)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr), scales="free_y") +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных (диапазонах повторений)",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(shape=FALSE,linetype=F)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr), scales="free_y") +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
shape = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных (диапазонах повторений)",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(shape=FALSE,linetype=F)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr), scales="free_y") +
geom_point(aes(shape=n),size = 5) + geom_line(aes(linetype=n),size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
shape = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных (диапазонах повторений)",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +guides(col=FALSE,linetype=F)+
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
plt = data %>% ggplot(aes(x = MRM, y = RM)) + geom_smooth() +
geom_point(aes(col = CountGroup), size = 3) + theme_bw() +
#facet_grid(vars(CountGroup))+
labs(x = "Многоповторный максимум",
y = "Повторный максимум",
col = "Диапазон повторений",
title = "Зависимость повторного максимума от многоповторного")
plt + theme(legend.position = c(0.9, 0.2))
plt + facet_grid(vars(CountGroup))
plt + facet_grid(vars(CountGroup),scale="yfree")
plt + facet_grid(vars(CountGroup),scales="free")
plt + facet_grid(vars(CountGroup),scales="free")+theme(legend.position = "bottom")
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
library(plotly)
data = read_tsv(
"data(rus).tsv",#"data(eng).tsv",
skip = 1,
col_names = F,
na = "",
col_types = "fddnfffnnnff",
comment = "#"
) %>% tbl_df()
colnames(data) = c(
"Date",
"RM",
"MRM",
"Count",
"Action",
"Sex",
"Experience",
"Age",
"Weight",
"Height",
"BodyType",
"Mail"
)
data %<>% #filter(Count<=20) %>%
arrange(MRM, Count, Weight) %>%  mutate(
CountGroup = cut(Count, breaks = c(1, 3, 6, 10, 20, 40)),
AgeGroup = cut(Age, breaks = c(1, 19, 27, 35, 70)),
Experience = factor(
Experience,
levels = c(
"До двух лет",
"2-3 года",
"4-5 лет",
"6-10 лет",
"11-15 лет" ,
"больше 15 лет"
),
ordered = T
),
Index = Weight / (0.01 * Height) ^ 2,
IndexGroup = cut(Index, breaks = c(0, 16, 18.5, 24.99, 30, 35, 40, 60))
) %>% select(-Date)#,-Mail) %>% filter(Count>1,MRM<RM)
levels(data$CountGroup) = c("2-3", "4-6", "7-10", "11-20", ">20")
levels(data$AgeGroup) = c("<20", "20-27", "28-35", ">35")
levels(data$IndexGroup) = c(
"выраженный дефицит",
"дефицит",
"норма",
"избыток",
"ожирение1",
"ожирение2",
"ожирение3"
)
ex = data$Experience %>% as.numeric()
ex[ex == 6] = 5
ex %<>% factor()
levels(ex) = c("До двух лет", "2-3 года", "4-5 лет", "6-10 лет", "больше 10 лет")
data %<>% mutate(Experience = factor(ex, ordered = T))
allrows = 1:nrow(data)
maxerror = 5
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique = data %>% select(AgeGroup, Height, BodyType, Experience, Sex, IndexGroup) %>% unique()
#функции
getparam = function(vec) {
ln = length(levels(vec))
x = numeric(ln)
ns = character(ln)
for (i in seq(ln)) {
x[i] = sum(vec == levels(vec)[i]) / length(vec)
ns[i] = paste0(levels(vec)[i], " (", round(x[i] * 100, 2), "%)")
}
return(list(x = x, ns = ns))
}
getPIE = function(vec, main = "") {
lst = getparam(vec)
pie(x = lst$x,
labels = lst$ns,
main = main)
}
getFan = function(vec, main = "") {
pr = getparam(vec)
fan.plot(pr$x, labels = pr$ns, main = main)
}
data.backup = data
data %<>% filter(Count <= 20)
data %>% summary()
Error = function(target, weight)
(target - weight) ^ 2 %>% mean() %>% sqrt()
Show = function(vals, df = data) {
#vals=predict(model,df)
err = df$RM - vals
cbind(
Fact = round(vals),
Target = df$RM,
Set = paste0(df$MRM, "*", df$Count),
ERROR = abs(df$RM - vals),
ErrorPercent = abs(err) / df$RM * 100,
df[, c(3:15)]
) %>% tbl_df() %>% select(-Count, -Mail, -Experience, IndexGroup) %>% arrange(-ERROR, -ErrorPercent, Weight) %>%
filter(ERROR > 1) %>% View()
cat("\n")
rg = range(err)#;print(err);print(rg)
if (rg[1] < 0)
cat("------------> Наибольшая ошибка в большую сторону:",
-rg[1],
"\n")
if (rg[2] > 0)
cat("------------> Наибольшая ошибка в меньшую сторону:", rg[2], "\n")
s = sum(abs(err) / df$RM * 100 > maxerror)
len = length(err)
cat(
"Модель ошиблась более чем на",
maxerror,
"% в",
s,
"случаях из",
len,
"(",
s / len * 100,
"%)\n"
)
s = sum(abs(err) > maxerror)
cat(
"Модель ошиблась более чем на",
maxerror,
"кг в",
s,
"случаях из",
len,
"(",
s / len * 100,
"%)\n"
)
cat("----------------> Статистика по ошибкам в процентах:\n")
(abs(df$RM - vals) / df$RM * 100) %>% summary() %>% print()
cat("-------------------> Среднеквадратичная ошибка:",
Error(vals, df$RM),
"\n")
}
ShowErrors = function(model,
power.coef = 1,
sum.coef = 0) {
Show(predict(model, data) * power.coef + sum.coef)
cat(
"Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data, glm(
formula = model$call$formula, data = data
), K = 10)$delta[1],
"\n"
)
cat(
"Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(
data %>% filter(Count < 11),
glm(
formula = model$call$formula,
data = data %>% filter(Count < 11)
),
K = 10
)$delta[1],
"\n"
)
cat(
"Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(
data %>% filter(Count < 7),
glm(
formula = model$call$formula,
data = data %>% filter(Count < 7)
),
K = 10
)$delta[1],
"\n"
)
}
ResAn = function(res) {
p = ggplot(data %>% mutate(res = res), aes(x = CountGroup, y = res)) +
geom_boxplot() + labs(x = "Группа повторений", y = "Остатки (цель - предсказание)", title =
"Распределения остатков в зависимости от группы повторений") + theme_bw()
print(p)
(p + facet_grid(vars(Action))) %>% print()
(p + facet_grid(vars(BodyType), vars(Action))) %>% print()
return(0)
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$RM - data$MRM * (1 + 0.0333 * data$Count))
ResVal = function(vals)
ResAn(data$RM - vals)
#ResGraf=function(model)ResVal(predict(model,data))
mysummary = function(mdl) {
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
cat("\n")
gvlma::gvlma(mdl) %>% summary()
cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
cat("\n")
par(mfrow = c(2, 2))
plot(mdl)
par(mfrow = c(1, 1))
cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
cat("\n")
shapiro.test(mdl$residuals) %>% print()
cat("\n")
qqPlot(mdl, main = "Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
cat("\n")
vif(mdl) %>% print()
cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
cat("\n")
durbinWatsonTest(mdl) %>% print()
cat("\n")   #тест на автокорреляцию
# cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
# ncvTest(mdl)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n")
cat("\n")
outs = outlierTest(mdl)
outs %>% print()
influ = influencePlot(mdl, main = "Диаграмма влияния", sub = "Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n")
cat("\n")
data[c(outs$p %>% names(), influ %>% rownames()) %>% as.numeric(), ] %>% unique() %>%
select(-Mail) %>% arrange(-RM, -Count) %>% print()
cat("\n")
}
all = function(modelka) {
modelka %>% ShowErrors()
modelka %>% predict(data) %>% ResVal()
modelka %>% mysummary()
}
data %<>% mutate(
Body2 = ifelse(BodyType == "Эндоморф", "Endo", "NonEndo") %>% factor(),
Action2 = ifelse(Action == "Жим", "Up", "Down") %>% factor()
)
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
data %<>% filter(Count < 11)
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
ggplot(data,aes(x=MRM*Count,y=RM))+geom_point()
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-10,-5,5,10))),
aes(x=MRM*Count,y=RM))+geom_point()
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-10,-5,5,10))),
aes(x=MRM*Count,y=RM,col=errors))+geom_point()
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM*Count,y=RM,col=errors))+geom_point()
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM*Count,y=RM,col=errors,shape=Action))+geom_point(size=3)
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM,y=Count,col=errors,shape=Action))+geom_point(size=3)
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM,y=Index,col=errors,shape=Action))+geom_point(size=3)
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM,y=Index,col=errors,shape=Action))+geom_point(size=3)+
facet_grid(vars(CountGroup))+
theme_bw()
ggplot(data %>% mutate(errors=cut(b5$residuals,breaks = c(-15,-10,-5,5,10,15))),
aes(x=MRM/Index,y=Index,col=errors,shape=Action))+geom_point(size=3)+
facet_grid(vars(CountGroup))+
theme_bw()
m = function(t) exp(log(500)-t*log(5)/2)
m(0)
m(10)
b = log(500)
a = (exp(10)-b)/10
m = function(t) exp(a*t+b)
m(0)
m(10)
b=log(500)
a=(log(10)-b)/10
m=function(t) exp(a*t+b)
m(0)
m(10)
m(20)
b = log(500)
a=(log(100)-b)/10
m = function(t) exp(a*t+b)
m(0)
m(10)
m(20)
